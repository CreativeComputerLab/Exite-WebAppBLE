<blocks app="Snap! 8.2, https://snap.berkeley.edu" version="2"><block-definition s="set digital pin %&apos;pin_num&apos; to %&apos;level&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10&#xD;11&#xD;13&#xD;14&#xD;15&#xD;16</options></input><input type="%s" readonly="true">0<options>0&#xD;1</options></input></inputs><script><custom-block s="microbitSnapSetup"></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>pin_num</l><l>level</l></list><l>              var thisCommand = {&#xD;                robot: &apos;A&apos;,&#xD;                pin: pin_num,&#xD;                value: level,&#xD;                isDigital: 1,&#xD;                isInput: 0,&#xD;                isServo: 0,&#xD;                isServoPulse: 0,&#xD;                isAnalogPeriod: 0,&#xD;                isDigitalPulse: 0,&#xD;                digitalPulseLevel: 0&#xD;              }&#xD;&#xD;              window.snapMicrobit.sendCommand(thisCommand);</l></block><list><block var="pin_num"/><block var="level"/></list></block></script><scripts><script x="894" y="100.83333333333331"><block s="doReport"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/out/dwritepin/</l><block var="pin_num"/><l>/</l><block var="level"/></list></block></block></block></script></scripts></block-definition><block-definition s="read digital pin %&apos;pin_num&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%txt" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10&#xD;11&#xD;13&#xD;14&#xD;15&#xD;16</options></input></inputs><script><custom-block s="microbitSnapSetup"></custom-block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>&#xD;                  if (window.snapMicrobit.digitalReadPinBlock === undefined) {&#xD;                    window.snapMicrobit.digitalReadPinBlock = function (pin) {&#xD;                      let robot = "A";&#xD;                      var isDigital, isInput, isServo, isServoPulse, isAnalogPeriod, isDigitalPulse, digitalPulseLevel;&#xD;                      isDigital = isInput = isServo = isServoPulse = isAnalogPeriod = isDigitalPulse = digitalPulseLevel= 0; &#xD;&#xD;                      // Set Pin Config Here:&#xD;                      // Analog Pin, is an output:&#xD;                      isInput = 1;  // a pin read is an input pin  i.e input voltage to the micro:bit&#xD;                      isDigital = 1;&#xD;&#xD;                      // Check for first read here&#xD;                      if (window.snapMicrobit.isFirstRead(robot, pin, isDigital, isInput, isAnalogPeriod, isDigitalPulse, digitalPulseLevel))&#xD;                      {&#xD;                          //isDigital=0 and isOutput=1 means this is an analog read pin.&#xD;                          var thisCommand = {&#xD;                            robot: robot,&#xD;                            pin: pin,&#xD;                            value: 0, // No value necessary, setting pin state&#xD;                            isDigital: isDigital,&#xD;                            isInput: isInput,&#xD;                            isServo: 0,&#xD;                            isServoPulse: 0,&#xD;                            isAnalogPeriod: 0,&#xD;                            isDigitalPulse: 0,&#xD;                            digitalPulseLevel: 0&#xD;                          }&#xD;                            window.snapMicrobit.sendCommand(thisCommand);&#xD;                            return -1;&#xD;                      }&#xD;                      else {&#xD;                        var pinVal = window.snapMicrobit.pinToInt(robot, pin);&#xD;                        //return window.snapMicrobit.notificationData[robot][pin] &amp; 0xFFFF&#xD;                        return pinVal &amp; 0xFFFF&#xD;                      }&#xD;                    }&#xD;                  }&#xD;&#xD;                  // TODO  this loop below doesn&apos;t work. Need to find another way to wait for notification after first read&#xD;&#xD;                  var numCalls = 5;&#xD;                  var callNum = 0;&#xD;                  var value = -1;&#xD;&#xD;                  value = window.snapMicrobit.digitalReadPinBlock(pin);&#xD;&#xD;                  //while ((value == -1) &amp;&amp; (callNum++ &lt; numCalls)) {&#xD;                  //   value = window.snapMicrobit.readPinBlock(pin);&#xD;                  //}&#xD;&#xD;                  return value;&#xD;                </l></block><list><block var="pin_num"/></list></block></block></script><scripts><script x="668" y="43.833333333333314"><block s="doReport"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/in/dreadpin/</l><block var="pin_num"/></list></block></block></block></script><script x="860" y="119.19999999999999"><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>var numCalls = 100;&#xD;var callNum = 0;&#xD;function readdigitalgpin (pin, callNum) {&#xD;    var request = new XMLHttpRequest();&#xD;    var ledURL = "http://127.0.0.1:30063/microbit/in/dreadpin/" + pin;&#xD;    request.open(&apos;GET&apos;, ledURL, false);  // `false` makes the request synchronous&#xD;    request.send(null);&#xD;    callNum++;&#xD;&#xD;    if (request.status === 200) {&#xD;      console.log(request.responseText);&#xD;      if ((request.responseText == -1) &amp;&amp; (callNum &lt; numCalls))&#xD;         readdigitalgpin(pin, callNum);&#xD;      else&#xD;         return request.responseText;&#xD;    } else&#xD;        return "timeout error";&#xD;}&#xD;&#xD;return readdigitalgpin(pin, callNum);</l></block><list><block var="pin_num"/></list></block></block></script></scripts></block-definition><block-definition s="set analog pin %&apos;pin_num&apos; to %&apos;level&apos; %" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;10</options></input><input type="%n">0</input></inputs><script><block s="doIf"><block s="reportVariadicGreaterThan"><list><block var="level"/><l>100</l></list></block><script><block s="doSetVar"><l>level</l><l>100</l></block><block s="doIf"><block s="reportVariadicLessThan"><list><block var="level"/><l>0</l></list></block><script><block s="doSetVar"><l>level</l><l>0</l></block></script></block></script></block><block s="doSetVar"><l>level</l><block s="reportVariadicProduct"><list><block var="level"/><l>10.23</l></list></block></block><custom-block s="microbitSnapSetup"></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>pin_num</l><l>level</l></list><l>              var thisCommand = {&#xD;                robot: &apos;A&apos;,&#xD;                pin: pin_num,&#xD;                value: level,&#xD;                isDigital: 0,&#xD;                isInput: 0,&#xD;                isServo: 0,&#xD;                isServoPulse: 0,&#xD;                isAnalogPeriod: 0,&#xD;                isDigitalPulse: 0,&#xD;                digitalPulseLevel: 0&#xD;              }&#xD;&#xD;              window.snapMicrobit.sendCommand(thisCommand);</l></block><list><block var="pin_num"/><block var="level"/></list></block></script><scripts><script x="593" y="178.33333333333337"><block s="doReport"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/out/awritepin/</l><block var="pin_num"/><l>/</l><block var="level"/></list></block></block></block></script></scripts></block-definition><block-definition s="read analog pin %&apos;pin_num&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;10</options></input></inputs><script><custom-block s="microbitSnapSetup"></custom-block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>&#xD;                  if (window.snapMicrobit.analogReadPinBlock === undefined) {&#xD;                    window.snapMicrobit.analogReadPinBlock = function (pin) {&#xD;                      let robot = "A";&#xD;                      var isDigital, isInput, isServo, isServoPulse, isAnalogPeriod, isDigitalPulse, digitalPulseLevel;&#xD;                      isDigital = isInput = isServo = isServoPulse = isAnalogPeriod = isDigitalPulse = digitalPulseLevel= 0; &#xD;&#xD;                      // Set Pin Config Here:&#xD;                      // Analog Pin, is an output:&#xD;                      isInput = 1;  // a pin read is an input pin  i.e input voltage to the micro:bit&#xD;                      isDigital = 0;&#xD;&#xD;                      // Check for first read here&#xD;                      if (window.snapMicrobit.isFirstRead(robot, pin, isDigital, isInput, isAnalogPeriod, isDigitalPulse, digitalPulseLevel))&#xD;                      {&#xD;                          //isDigital=0 and isOutput=1 means this is an analog read pin.&#xD;                          var thisCommand = {&#xD;                            robot: robot,&#xD;                            pin: pin,&#xD;                            value: 0, // No value necessary, setting pin state&#xD;                            isDigital: isDigital,&#xD;                            isInput: isInput,&#xD;                            isServo: 0,&#xD;                            isServoPulse: 0,&#xD;                            isAnalogPeriod: 0,&#xD;                            isDigitalPulse: 0,&#xD;                            digitalPulseLevel: 0&#xD;                          }&#xD;                            window.snapMicrobit.sendCommand(thisCommand);&#xD;                            return -1;&#xD;                      }&#xD;                      else {&#xD;                        var pinVal = window.snapMicrobit.pinToInt(robot, pin);&#xD;                        //return window.snapMicrobit.notificationData[robot][pin] &amp; 0xFFFF&#xD;                        return pinVal &amp; 0xFFFF&#xD;                      }&#xD;                    }&#xD;                  }&#xD;&#xD;                  // TODO  this loop below doesn&apos;t work. Need to find another way to wait for notification after first read&#xD;&#xD;                  var numCalls = 5;&#xD;                  var callNum = 0;&#xD;                  var value = -1;&#xD;&#xD;                  value = window.snapMicrobit.analogReadPinBlock(pin);&#xD;&#xD;                  //while ((value == -1) &amp;&amp; (callNum++ &lt; numCalls)) {&#xD;                  //   value = window.snapMicrobit.readPinBlock(pin);&#xD;                  //}&#xD;&#xD;                  return value;&#xD;                </l></block><list><block var="pin_num"/></list></block></block></script><scripts><script x="858.9951171875" y="55.833333333333314"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/in/areadpin/</l><block var="pin_num"/></list></block></block></script></scripts></block-definition><block-definition s="set analog pulse pin %&apos;pin_num&apos; to %&apos;level&apos; µs" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;10</options></input><input type="%n">0</input></inputs><script><custom-block s="microbitSnapSetup"></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>pin_num</l><l>level</l></list><l>              var thisCommand = {&#xD;                robot: &apos;A&apos;,&#xD;                pin: pin_num,&#xD;                value: level,&#xD;                isDigital: 0,&#xD;                isInput: 0,&#xD;                isServo: 0,&#xD;                isServoPulse: 0,&#xD;                isAnalogPeriod: 1,&#xD;                isDigitalPulse: 0,&#xD;                digitalPulseLevel: 0&#xD;              }&#xD;&#xD;              window.snapMicrobit.sendCommand(thisCommand);</l></block><list><block var="pin_num"/><block var="level"/></list></block></script><scripts><script x="492" y="89.83333333333331"><block s="doReport"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/out/writeanalogpulse/</l><block var="pin_num"/><l>/</l><block var="level"/></list></block></block></block></script></scripts></block-definition><block-definition s="micro:bit Display $nl %&apos;r1c1&apos; %&apos;r1c2&apos; %&apos;r1c3&apos; %&apos;r1c4&apos; %&apos;r1c5&apos; $nl %&apos;r2c1&apos; %&apos;r2c2&apos; %&apos;r2c3&apos; %&apos;r2c4&apos; %&apos;r2c5&apos; $nl %&apos;r3c1&apos; %&apos;r3c2&apos; %&apos;r3c3&apos; %&apos;r3c4&apos; %&apos;r3c5&apos; $nl %&apos;r4c1&apos; %&apos;r4c2&apos; %&apos;r4c3&apos; %&apos;r4c4&apos; %&apos;r4c5&apos; $nl %&apos;r5c1&apos; %&apos;r5c2&apos; %&apos;r5c3&apos; %&apos;r5c4&apos; %&apos;r5c5&apos;" type="command" category="looks"><header></header><code></code><translations>ko:micro:bit 보이기 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;de:micro:bit LED Anzeige _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;pt:micro:bit Visor _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;fr:micro:bit Display _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;nl:micro:bit Scherm _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;zh_CN:micro:bit 显示 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;zh_TW:micro:bit 顯示 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;ar:micro:bit عرض _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;dk:micro:bit Display _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;he:micro:bit מסך _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;es:micro:bit Monitor _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;ca:micro:bit Pantalla _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;fi:micro:bit Näytä _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;sv:micro:bit Skärm _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&#xD;</translations><inputs><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input><input type="%b">false</input></inputs><script><custom-block s="microbitSnapSetup"></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>r1c1, r1c2, r1c3, r1c4, r1c5, r2c1, r2c2, r2c3, r2c4, r2c5, r3c1, r3c2, r3c3, r3c4, r3c5, r4c1, r4c2, r4c3, r4c4, r4c5, r5c1, r5c2, r5c3, r5c4, r5c5 </l></list><l>              // Do not send redundant command if the state has not changed.&#xD;&#xD;              var matrixBits = 0;  // 32 bit int which contains bits indicating the desired state of the LED matrix.&#xD;              var params = [r1c1, r1c2, r1c3, r1c4, r1c5, r2c1, r2c2, r2c3, r2c4, r2c5, r3c1, r3c2, r3c3, r3c4, r3c5, r4c1, r4c2, r4c3, r4c4, r4c5, r5c1, r5c2, r5c3, r5c4, r5c5 ];&#xD;              var symbolCommand = new Uint8Array(4);&#xD;&#xD;              symbolCommand[0] |= (1 &lt;&lt; 6);  // This way a blank matrix is never 0 &#xD;&#xD;&#xD;              symbolCommand[0] = params[24] == true ?   (symbolCommand[0] | (1 &lt;&lt; 0)) :   (symbolCommand[0] &amp; &#126;(1 &lt;&lt; 0)); // R5 C5&#xD;&#xD;&#xD;              symbolCommand[1] = params[19] == true ?   (symbolCommand[1] | (1 &lt;&lt; 7)) :   (symbolCommand[1] &amp; &#126;(1 &lt;&lt; 7)); // R4 C5&#xD;              symbolCommand[1] = params[14] == true ?   (symbolCommand[1] | (1 &lt;&lt; 6)) :   (symbolCommand[1] &amp; &#126;(1 &lt;&lt; 6)); // R3 C5&#xD;              symbolCommand[1] = params[9] == true ?   (symbolCommand[1] | (1 &lt;&lt; 5)) :   (symbolCommand[1] &amp; &#126;(1 &lt;&lt; 5)); // R2 C5&#xD;              symbolCommand[1] = params[4] == true ?   (symbolCommand[1] | (1 &lt;&lt; 4)) :   (symbolCommand[1] &amp; &#126;(1 &lt;&lt; 4)); // R1 C5&#xD;&#xD;              symbolCommand[1] = params[23] == true ?   (symbolCommand[1] | (1 &lt;&lt; 3)) :   (symbolCommand[1] &amp; &#126;(1 &lt;&lt; 3)); // R5 C4&#xD;              symbolCommand[1] = params[18] == true ?   (symbolCommand[1] | (1 &lt;&lt; 2)) :   (symbolCommand[1] &amp; &#126;(1 &lt;&lt; 2)); // R4 C4&#xD;              symbolCommand[1] = params[13] == true ?   (symbolCommand[1] | (1 &lt;&lt; 1)) :   (symbolCommand[1] &amp; &#126;(1 &lt;&lt; 1)); // R3 C4&#xD;              symbolCommand[1] = params[8] == true ?   (symbolCommand[1] | (1 &lt;&lt; 0)) :   (symbolCommand[1] &amp; &#126;(1 &lt;&lt; 0)); // R2 C4&#xD;&#xD;&#xD;&#xD;              symbolCommand[2] = params[3] == true ?   (symbolCommand[2] | (1 &lt;&lt; 7)) :   (symbolCommand[2] &amp; &#126;(1 &lt;&lt; 7)); // R1 C4&#xD;&#xD;              symbolCommand[2] = params[22] == true ?   (symbolCommand[2] | (1 &lt;&lt; 6)) :   (symbolCommand[2] &amp; &#126;(1 &lt;&lt; 6)); // R5 C3&#xD;              symbolCommand[2] = params[17] == true ?   (symbolCommand[2] | (1 &lt;&lt; 5)) :   (symbolCommand[2] &amp; &#126;(1 &lt;&lt; 5)); // R4 C3&#xD;              symbolCommand[2] = params[12] == true ?   (symbolCommand[2] | (1 &lt;&lt; 4)) :   (symbolCommand[2] &amp; &#126;(1 &lt;&lt; 4)); // R3 C3&#xD;              symbolCommand[2] = params[7] == true ?   (symbolCommand[2] | (1 &lt;&lt; 3)) :   (symbolCommand[2] &amp; &#126;(1 &lt;&lt; 3)); // R2 C3&#xD;              symbolCommand[2] = params[2] == true ?   (symbolCommand[2] | (1 &lt;&lt; 2)) :   (symbolCommand[2] &amp; &#126;(1 &lt;&lt; 2)); // R1 C3&#xD;&#xD;              symbolCommand[2] = params[21] == true ?   (symbolCommand[2] | (1 &lt;&lt; 1)) :   (symbolCommand[2] &amp; &#126;(1 &lt;&lt; 1)); // R5 C2&#xD;              symbolCommand[2] = params[16] == true ?   (symbolCommand[2] | (1 &lt;&lt; 0)) :   (symbolCommand[2] &amp; &#126;(1 &lt;&lt; 0)); // R4 C2&#xD;&#xD;&#xD;&#xD;              symbolCommand[3] = params[11] == true ?   (symbolCommand[3] | (1 &lt;&lt; 7)) :   (symbolCommand[3] &amp; &#126;(1 &lt;&lt; 7)); // R3 C2&#xD;              symbolCommand[3] = params[6] == true ?   (symbolCommand[3] | (1 &lt;&lt; 6)) :   (symbolCommand[3] &amp; &#126;(1 &lt;&lt; 6)); // R2 C2 &#xD;              symbolCommand[3] = params[1] == true ?   (symbolCommand[3] | (1 &lt;&lt; 5)) :   (symbolCommand[3] &amp; &#126;(1 &lt;&lt; 5)); //  R1 C2&#xD;&#xD;              symbolCommand[3] = params[20] == true ?   (symbolCommand[3] | (1 &lt;&lt; 4)) :   (symbolCommand[3] &amp; &#126;(1 &lt;&lt; 4)); //24 R5 C1&#xD;              symbolCommand[3] = params[15] == true ?   (symbolCommand[3] | (1 &lt;&lt; 3)) :   (symbolCommand[3] &amp; &#126;(1 &lt;&lt; 3)); //24 R4 C1&#xD;              symbolCommand[3] = params[10] == true ?   (symbolCommand[3] | (1 &lt;&lt; 2)) :   (symbolCommand[3] &amp; &#126;(1 &lt;&lt; 2)); //24 R3 C1&#xD;              symbolCommand[3] = params[5] == true ?   (symbolCommand[3] | (1 &lt;&lt; 1)) :   (symbolCommand[3] &amp; &#126;(1 &lt;&lt; 1)); //24 R2 C1&#xD;              symbolCommand[3] = params[0] == true ?   (symbolCommand[3] | (1 &lt;&lt; 0)) :   (symbolCommand[3] &amp; &#126;(1 &lt;&lt; 0)); //   R1 C1&#xD;&#xD;&#xD;              //console.log(params);&#xD;              //console.log("symbolCommand = ");&#xD;              //console.log(symbolCommand);&#xD;&#xD;              var dataview = new DataView(symbolCommand.buffer);&#xD;              matrixBits =  dataview.getUint32(0);&#xD;              matrixBits |= 1 &lt;&lt; 27 // set bit 27 to indicate LED Matrix Data in bits 0 - 24&#xD;&#xD;              //console.log("MatrixBits = 0x" + matrixBits.toString(16));&#xD;&#xD;&#xD;              if (window.snapMicrobit.led.matrix.lastValue == matrixBits){&#xD;                return;&#xD;              }&#xD;  &#xD;              var thisCommand = {&#xD;                robot: &apos;A&apos;,&#xD;                pin: 17,       // LED command is encoded on pin 17&apos;s position&#xD;                value: matrixBits,&#xD;                isDigital: 0,  // LED commands are all zeros&#xD;                isOutput: 0,&#xD;                isServo: 0,&#xD;                isServoPulse: 0,&#xD;                isAnalogPeriod: 0,&#xD;                isDigitalPulse: 0,&#xD;                digitalPulseLevel: 0&#xD;              }&#xD;&#xD;              window.snapMicrobit.led.matrix.lastValue = matrixBits;&#xD;              window.snapMicrobit.sendCommand(thisCommand);&#xD;              &#xD;            </l></block><list><block var="r1c1"/><block var="r1c2"/><block var="r1c3"/><block var="r1c4"/><block var="r1c5"/><block var="r2c1"/><block var="r2c2"/><block var="r2c3"/><block var="r2c4"/><block var="r2c5"/><block var="r3c1"/><block var="r3c2"/><block var="r3c3"/><block var="r3c4"/><block var="r3c5"/><block var="r4c1"/><block var="r4c2"/><block var="r4c3"/><block var="r4c4"/><block var="r4c5"/><block var="r5c1"/><block var="r5c2"/><block var="r5c3"/><block var="r5c4"/><block var="r5c5"/></list></block><block s="doWait"><l>0.01</l></block></script><scripts><script x="731" y="16"><block s="doReport"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30061/hummingbird/out/symbol/A/</l><block var="11"/><l>/</l><block var="12"/><l>/</l><block var="r1c3"/><l>/</l><block var="r1c4"/><l>/</l><block var="r1c5"/><l>/</l><block var="r2c1"/><l>/</l><block var="r2c2"/><l>/</l><block var="r2c3"/><l>/</l><block var="r2c4"/><l>/</l><block var="25"/><l>/</l><block var="31"/><l>/</l><block var="r3c2"/><l>/</l><block var="33"/><l>/</l><block var="34"/><l>/</l><block var="35"/><l>/</l><block var="41"/><l>/</l><block var="42"/><l>/</l><block var="43"/><l>/</l><block var="44"/><l>/</l><block var="45"/><l>/</l><block var="51"/><l>/</l><block var="52"/><l>/</l><block var="53"/><l>/</l><block var="54"/><l>/</l><block var="55"/></list></block></block></block></script></scripts></block-definition><block-definition s="micro:bit display %&apos;state&apos;" type="command" category="looks"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">disable<options>disable&#xD;enable</options></input></inputs><script><custom-block s="microbitSnapSetup"></custom-block><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="state"/><l>enable</l></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l>state</l></list><l>              // Do not send redundant command if the state has not changed.&#xD;              if (window.snapMicrobit.led.enable.lastValue == state){&#xD;                return;&#xD;              }&#xD;  &#xD;              var thisCommand = {&#xD;                robot: &apos;A&apos;,&#xD;                pin: 17,       // LED command is encoded on pin 17&apos;s position&#xD;                value: 1,&#xD;                isDigital: 0,  // LED commands are all zeros&#xD;                isOutput: 0,&#xD;                isServo: 0,&#xD;                isServoPulse: 0,&#xD;                isAnalogPeriod: 0,&#xD;                isDigitalPulse: 0,&#xD;                digitalPulseLevel: 0&#xD;              }&#xD;&#xD;              window.snapMicrobit.led.enable.lastValue = state;&#xD;              window.snapMicrobit.sendCommand(thisCommand);&#xD;              </l></block><list><block var="state"/></list></block></script><script><block s="doRun"><block s="reportJSFunction"><list><l>state</l></list><l>              // Do not send redundant command if the state has not changed.&#xD;              if (window.snapMicrobit.led.enable.lastValue == state){&#xD;                return;&#xD;              }&#xD;  &#xD;              var thisCommand = {&#xD;                robot: &apos;A&apos;,&#xD;                pin: 17,       // LED command is encoded on pin 17&apos;s position&#xD;                value: 0,&#xD;                isDigital: 0,  // LED commands are all zeros&#xD;                isOutput: 0,&#xD;                isServo: 0,&#xD;                isServoPulse: 0,&#xD;                isAnalogPeriod: 0,&#xD;                isDigitalPulse: 0,&#xD;                digitalPulseLevel: 0&#xD;              }&#xD;&#xD;              window.snapMicrobit.led.enable.lastValue = state;&#xD;              window.snapMicrobit.sendCommand(thisCommand);&#xD;              </l></block><list><block var="state"/></list></block></script></block><block s="doWait"><l>0.01</l></block></script><scripts><script x="562" y="167.33333333333337"><block s="doReport"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/out/microbitdisplay/</l><l>17</l><l>/</l><l>0</l></list></block></block></block></script><script x="591" y="253.50000000000006"><block s="doReport"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/out/microbitdisplay/</l><l>17</l><l>/</l><l>1</l></list></block></block></block></script></scripts></block-definition><block-definition s="read %&apos;sensor&apos; sensor on analog pin %&apos;pin&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%txt" readonly="true">Light (%)<options>Rotary (%)&#xD;Light (%)&#xD;Moisture (%)&#xD;Sound (%)&#xD;Temperature (C)&#xD;Other (V)</options></input><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;10</options></input></inputs><script><block s="doDeclareVariables"><list><l>value</l></list></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="sensor"/><l>Other (V)</l></list></block><script><block s="doSetVar"><l>sensor</l><l>Other</l></block></script></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="sensor"/><l>Distance (cm)</l></list></block><script><block s="doSetVar"><l>sensor</l><l>Distance</l></block></script></block><block s="doSetVar"><l>value</l><custom-block s="read analog pin %s"><block var="pin"/></custom-block></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="sensor"/><l>Other</l></list></block><script><block s="doReport"><block s="reportQuotient"><block s="reportRound"><block s="reportVariadicProduct"><list><block s="reportVariadicProduct"><list><l>0.003225806</l><block var="value"/></list></block><l>100</l></list></block></block><l>100</l><comment w="102" collapsed="false">3.3/1023 scale factor</comment></block></block></script></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="sensor"/><l>Sound (%)</l></list><comment w="155" collapsed="true">If connected, adjust sound level</comment></block><script><block s="doReport"><block s="reportRound"><block s="reportVariadicProduct"><list><l>0.1955</l><block var="value"/></list><comment w="140" collapsed="false">200/1023 Scaling factor</comment></block></block></block></script></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="sensor"/><l>Light (%)</l></list></block><script><block s="doReport"><block s="reportRound"><block s="reportVariadicProduct"><list><l>0.392</l><block var="value"/></list><comment w="140" collapsed="false">TODO: Digital Light Sensor  i.e. On or Off</comment></block></block></block></script></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="sensor"/><l>Rotary (%)</l></list></block><script><block s="doReport"><block s="reportRound"><block s="reportVariadicProduct"><list><l>0.09775</l><block var="value"/></list><comment w="140" collapsed="false">100/1023 Scaling factor</comment></block></block></block></script></block></script><scripts><script x="251" y="586.1666666666667"><block s="doIfElse"><block s="reportNot"><block s="reportVariadicEquals"><list><block var="value"/><l>Not Connected</l></list></block></block><script></script><script><block s="doReport"><l>Not Connected</l></block></script></block></script><script x="356.4560546875" y="198.33333333333331"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/in/areadpin/</l><block var="pin"/></list></block></block></script><script x="471" y="244.16666666666669"><block s="doIf"><block s="reportVariadicEquals"><list><block var="sensor"/><l>Distance</l></list></block><script><block s="doReport"><block s="reportRound"><block s="reportVariadicProduct"><list><l>1.17</l><block var="value"/></list></block></block><comment w="90" collapsed="false">117/100 Scaling factor</comment></block></script></block></script></scripts></block-definition><block-definition s="micro:bit Accelerometer (m/s²) %&apos;dim&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%txt" readonly="true">X<options>X&#xD;Y&#xD;Z</options></input></inputs><script><custom-block s="microbitSnapSetup"></custom-block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>dim</l></list><l>var pin;&#xD;var robot = "A";&#xD;if (dim == &apos;X&apos;)&#xD;	pin = 17;&#xD;if (dim == &apos;Y&apos;)&#xD;	pin = 18;&#xD;if (dim == &apos;Z&apos;)&#xD;	pin = 19;&#xD;return Math.round((window.snapMicrobit.pinToInt32(robot, pin) / 100)) * 0.98;</l></block><list><block var="dim"/></list></block></block></script><scripts><script x="507" y="35.833333333333314"><block s="doReport"><block s="reportVariadicProduct"><list><block s="reportRound"><block s="reportQuotient"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/in/</l><l>accelerometer</l><l>/</l><block var="dim"/></list></block></block><l>100</l></block><comment w="229" collapsed="false">milli-g  converted to m/s/s.  e.g. 1g = 9.8 m/s/s</comment></block><l>.98</l></list></block></block></script></scripts></block-definition><block-definition s="micro:bit %&apos;dim&apos;" type="predicate" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%txt" readonly="true">Screen Up<options>Screen Up&#xD;Screen Down&#xD;Tilt Left&#xD;Tilt Right&#xD;Logo Up&#xD;Logo Down&#xD;Shake</options></input></inputs><script><custom-block s="microbitSnapSetup"></custom-block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>dim</l></list><l>                    var robot = "A";&#xD;                    value = window.snapMicrobit.pinToInt(robot, 12); // pin 12 is tilt sensor&#xD;                    switch (dim) { //XYZ number to byte mapping&#xD;                        case "Tilt Left":   //X axis&#xD;                            if (value == 3)   //MICROBIT_ACCELEROMETER_EVT_TILT_LEFT&#xD;                                return true;&#xD;                            else &#xD;                                return false;&#xD;                        break;&#xD;                        case "Tilt Right":                        &#xD;                            if (value == 4)   //MICROBIT_ACCELEROMETER_EVT_TILT_RIGHT&#xD;                                return true;&#xD;                            else &#xD;                                return false;&#xD;                        break;&#xD;                        case "Logo Up":     // Y axis&#xD;                            if (value == 1)   &#xD;                                return true;&#xD;                            else &#xD;                                return false;&#xD;                        break;&#xD;                        case "Logo Down": //MICROBIT_ACCELEROMETER_EVT_TILT_DOWN&#xD;                            if (value == 2)   &#xD;                                return true;&#xD;                            else &#xD;                                return false;&#xD;                        break;                            &#xD;                        case "Screen Up":     // Z axis //MICROBIT_ACCELEROMETER_EVT_FACE_UP&#xD;                            if (value == 5)   &#xD;                                return true;&#xD;                            else &#xD;                                return false;&#xD;                        break;&#xD;                        case "Screen Down":   //MICROBIT_ACCELEROMETER_EVT_FACE_DOWN&#xD;                            if (value == 6)   &#xD;                                return true;&#xD;                            else &#xD;                                return false;    &#xD;                        break;&#xD;                        case "Shake" : //MICROBIT_ACCELEROMETER_EVT_SHAKE&#xD;                            if (value == 11)   &#xD;                                return true;&#xD;                            else &#xD;                                return false;&#xD;                        break;&#xD;                        default:&#xD;                            return false;&#xD;                        break;&#xD;                    }</l></block><list><block var="dim"/></list></block></block></script><scripts><script x="590" y="39.833333333333314"><block s="doIfElse"><block s="reportVariadicEquals"><list><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/in/orientation/</l><block var="dim"/></list></block></block><l>true</l></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></block></script></scripts></block-definition><block-definition s="Position Servo pin %&apos;pin&apos; %&apos;position&apos; °" type="command" category="motion"><header></header><code></code><translations>ko:Hummingbird 위치 제어 서보 _ _ °&#xD;de:Hummingbird Position Servo _ _ °&#xD;pt:Hummingbird Posição do Servo _ _ °&#xD;fr:Hummingbird Position Servo _ _ °&#xD;nl:Hummingbird Positie-Servo _ _ °&#xD;zh_CN:Hummingbird 位置伺服 _ _ °&#xD;zh_TW:Hummingbird 位置伺服 _ _ °&#xD;ar:Hummingbird موقف محرك سيرفو المؤازر  _ _&#xD;dk:Hummingbird Positionsservo _ _ °&#xD;he:Hummingbird סרוו כיוון     _ _&#xD;es:Hummingbird Servo de posicion _ _ °&#xD;ca:Hummingbird Servo posicional _ _ °&#xD;fi:Hummingbird Asentoservo _ _ °&#xD;sv:Hummingbird Positionsservo _ _ °&#xD;</translations><inputs><input type="%n" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;10</options></input><input type="%n">90</input></inputs><script><block s="doIf"><block s="reportVariadicLessThan"><list><block var="position"/><l>0</l></list></block><script><block s="doSetVar"><l>position</l><l>0</l></block></script></block><block s="doIf"><block s="reportVariadicGreaterThan"><list><block var="position"/><l>180</l></list></block><script><block s="doSetVar"><l>position</l><l>180</l></block></script></block><custom-block s="microbitSnapSetup"></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>position</l></list><l>              // Do not send redundant command if the position has not changed.&#xD;              if (window.snapMicrobit.servo.position.lastValue == position){&#xD;                //console.log("position Server value steady, doing nothing");&#xD;                return;&#xD;              }&#xD;  &#xD;              var thisCommand = {&#xD;                robot: &apos;A&apos;,&#xD;                pin: pin,&#xD;                value: position,&#xD;                isDigital: 0,&#xD;                isOutput: 0,&#xD;                isServo: 1,&#xD;                isServoPulse: 0,&#xD;                isAnalogPeriod: 0,&#xD;                isDigitalPulse: 0,&#xD;                digitalPulseLevel: 0&#xD;              }&#xD;&#xD;              window.snapMicrobit.sendCommand(thisCommand);&#xD;              window.snapMicrobit.servo.position.lastValue = position;&#xD;            </l></block><list><block var="pin"/><block var="position"/></list></block><block s="doWait"><l>0</l></block></script></block-definition><block-definition s="Rotation Servo pin %&apos;pin&apos; %&apos;speed&apos; %" type="command" category="motion"><header></header><code></code><translations>ko:Hummingbird 회전속도 제어 서보 _ _ %&#xD;de:Hummingbird Drehung Servo _ _ %&#xD;pt:Hummingbird Rotação do Servo _ _ %&#xD;fr:Hummingbird Rotation Servo _ _ %&#xD;nl:Hummingbird Draai-Servo _ _ %&#xD;zh_CN:Hummingbird 旋转伺服 _ _ %&#xD;zh_TW:Hummingbird 旋轉伺服 _ _ %&#xD;ar:Hummingbird فتحة دوران المحرك المؤازر  _ _&#xD;dk:Hummingbird Rotationsservo _ _ %&#xD;he:Hummingbird סרוו סיבובים    _ _ %&#xD;es:Hummingbird Servo de rotacion _ _ %&#xD;ca:Hummingbird Servo rotacional _ _ %&#xD;fi:Hummingbird Kiertoservo _ _ %&#xD;sv:Hummingbird Rotationsservo _ _ %&#xD;</translations><inputs><input type="%n" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;10</options></input><input type="%n">0</input></inputs><script><block s="doIf"><block s="reportVariadicLessThan"><list><block var="speed"/><l>-100</l></list></block><script><block s="doSetVar"><l>speed</l><l>-100</l></block></script></block><block s="doIf"><block s="reportVariadicGreaterThan"><list><block var="speed"/><l>100</l></list></block><script><block s="doSetVar"><l>speed</l><l>100</l></block></script></block><block s="doIfElse"><block s="reportVariadicAnd"><list><block s="reportVariadicGreaterThan"><list><block var="speed"/><l>-3</l></list></block><block s="reportVariadicLessThan"><list><block var="speed"/><l>3</l></list></block></list></block><script><block s="doSetVar"><l>speed</l><l>0</l></block></script><script><block s="doIfElse"><block s="reportVariadicGreaterThan"><list><block var="speed"/><l>0</l></list></block><script><block s="doSetVar"><l>speed</l><block s="reportMonadic"><l><option>abs</option></l><block s="reportDifference"><block var="speed"/><l>100</l></block></block></block><block s="doSetVar"><l>speed</l><block s="reportVariadicSum"><list><block s="reportVariadicProduct"><list><block var="speed"/><l>8</l></list></block><l>700</l></list></block></block></script><script><block s="doSetVar"><l>speed</l><block s="reportVariadicSum"><list><l>1500</l><block s="reportVariadicProduct"><list><block s="reportMonadic"><l><option>abs</option></l><block var="speed"/></block><l>8</l></list></block></list></block></block></script></block></script></block><custom-block s="microbitSnapSetup"></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>speed</l></list><l>              // Do not send redundant command if the position has not changed.&#xD;              if (window.snapMicrobit.servo.rotation.lastValue == speed){&#xD;                //console.log("Rotation Server value steady, doing nothing");&#xD;                return;&#xD;              }&#xD;  &#xD;              var thisCommand = {&#xD;                robot: &apos;A&apos;,&#xD;                pin: pin,&#xD;                value: speed,&#xD;                isDigital: 0,&#xD;                isOutput: 0,&#xD;                isServo: 0,&#xD;                isServoPulse: 1,&#xD;                isAnalogPeriod: 0,&#xD;                isDigitalPulse: 0,&#xD;                digitalPulseLevel: 0&#xD;              }&#xD;&#xD;              window.snapMicrobit.servo.rotation.lastValue = speed;&#xD;              window.snapMicrobit.sendCommand(thisCommand);&#xD;              &#xD;            </l></block><list><block var="pin"/><block var="speed"/></list></block></script></block-definition><block-definition s="set LED on analog pin %&apos;pin&apos; to %&apos;intensity&apos; %" type="command" category="looks"><header></header><code></code><translations>ko:Hummingbird LED _ _ %&#xD;de:Hummingbird LED _ _ %&#xD;pt:Hummingbird LED _ _ %&#xD;fr:Hummingbird LED _ _ %&#xD;nl:Hummingbird LED _ _ %&#xD;zh_CN:Hummingbird LED _ _ %&#xD;zh_TW:Hummingbird LED _ _ %&#xD;ar:Hummingbird ضوء _ _&#xD;dk:Hummingbird LED _ _ %&#xD;he:Hummingbird לד   % _ _&#xD;es:Hummingbird LED _ _ %&#xD;ca:Hummingbird LED _ _ %&#xD;fi:Hummingbird LED _ _ %&#xD;sv:Hummingbird LED _ _ %&#xD;</translations><inputs><input type="%n" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;10</options></input><input type="%n">0</input></inputs><script><block s="doIf"><block s="reportVariadicLessThan"><list><block var="intensity"/><l>0</l></list></block><script><block s="doSetVar"><l>intensity</l><l>0</l></block></script></block><block s="doIf"><block s="reportVariadicGreaterThan"><list><block var="intensity"/><l>100</l></list></block><script><block s="doSetVar"><l>intensity</l><l>100</l></block></script></block><block s="doSetVar"><l>intensity</l><block s="reportRound"><block s="reportVariadicProduct"><list><block var="intensity"/><l>10.23</l></list></block><comment w="158" collapsed="false">Scale factor  to 0 - 1023 range</comment></block></block><block s="doRun"><block s="reportJSFunction"><list><l>pin,intensitynum</l></list><l>////////////////////////////////////////////////////////////////////////////////&#xD;// In order to avoid sending more messages than the app can handle, whenever we&#xD;// send a message we also save it in a persistent global variable. When the&#xD;// message is processed in the app, the callback checks if the global variable&#xD;// still matches what it was changed to. If it was, it deletes the global&#xD;// variable. Otherwise the message is resent with new data.&#xD;//&#xD;// When this block is called it checks if the global value has been set. If it&#xD;// has, it sends a message. Otherwise it just updates the value and lets the&#xD;// callback handle it.&#xD;&#xD;&#xD;// We can&apos;t run code beforehand to define values so we must check each block&#xD;// call if they are set.&#xD;if (window.birdbrain === undefined || window.birdbrain.LEDs === undefined) {&#xD;    window.birdbrain = window.birdbrain || {};&#xD;    window.birdbrain.LEDs = {&#xD;        // By attaching this function to a global variable, it is only&#xD;        // defined once instead of every time this block is called, improving&#xD;        // performance significantly.&#xD;        setLEDIntensity: function(pin, intensity) {&#xD;            function callback() {&#xD;                if (window.birdbrain.LEDs[pin] === intensity) {&#xD;                    delete window.birdbrain.LEDs[pin];&#xD;                }&#xD;                else {&#xD;                    window.birdbrain.LEDs.setLEDIntensity(pin, window.birdbrain.LEDs[pin]);&#xD;                }&#xD;            }&#xD;&#xD;            //Create a new XMLHttpRequest object&#xD;            var xhr = new XMLHttpRequest();&#xD;            var ledURL = "http://127.0.0.1:30063/microbit/out/awritepin/" + pin + "/" + intensity;&#xD;            //console.log(ledURL);&#xD;            xhr.open("GET", ledURL, true);&#xD;            xhr.onload = function (e) {&#xD;              if (xhr.readyState === 4) {&#xD;                if (xhr.status === 200) {&#xD;                  callback();&#xD;                } else {&#xD;                  console.error(xhr.statusText);&#xD;                }&#xD;              }&#xD;            };&#xD;            xhr.onerror = function (e) {&#xD;              console.error(xhr.statusText);&#xD;            };&#xD;            xhr.send(null);&#xD;&#xD;        }&#xD;    }&#xD;}&#xD;&#xD;//var realIntensity = Math.floor(intensitynum*10.23);&#xD;&#xD;//realIntensity = Math.max(Math.min(realIntensity,1023.0),0.0);&#xD;&#xD;if (window.birdbrain.LEDs[pin] === undefined) {&#xD;  window.birdbrain.LEDs.setLEDIntensity(pin, intensitynum);&#xD;}&#xD;&#xD;window.birdbrain.LEDs[pin] = intensitynum;</l></block><list><block var="pin"/><block var="intensity"/></list></block><block s="doWait"><l>0</l></block></script><scripts><script x="484.42857142857156" y="35.5714285714285"><block s="doReport"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30061/hummingbird/out/led/</l><block var="port"/><l>/</l><block var="intensity"/></list></block></block></block></script></scripts></block-definition><block-definition s="set LED on digital pin %&apos;pin&apos; to %&apos;intensity&apos;" type="command" category="looks"><header></header><code></code><translations>ko:Hummingbird LED _ _ %&#xD;de:Hummingbird LED _ _ %&#xD;pt:Hummingbird LED _ _ %&#xD;fr:Hummingbird LED _ _ %&#xD;nl:Hummingbird LED _ _ %&#xD;zh_CN:Hummingbird LED _ _ %&#xD;zh_TW:Hummingbird LED _ _ %&#xD;ar:Hummingbird ضوء _ _&#xD;dk:Hummingbird LED _ _ %&#xD;he:Hummingbird לד   % _ _&#xD;es:Hummingbird LED _ _ %&#xD;ca:Hummingbird LED _ _ %&#xD;fi:Hummingbird LED _ _ %&#xD;sv:Hummingbird LED _ _ %&#xD;</translations><inputs><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10&#xD;11&#xD;13&#xD;14&#xD;15&#xD;16</options></input><input type="%s" readonly="true">0<options>0&#xD;1</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin,intensitynum</l></list><l>////////////////////////////////////////////////////////////////////////////////&#xD;// In order to avoid sending more messages than the app can handle, whenever we&#xD;// send a message we also save it in a persistent global variable. When the&#xD;// message is processed in the app, the callback checks if the global variable&#xD;// still matches what it was changed to. If it was, it deletes the global&#xD;// variable. Otherwise the message is resent with new data.&#xD;//&#xD;// When this block is called it checks if the global value has been set. If it&#xD;// has, it sends a message. Otherwise it just updates the value and lets the&#xD;// callback handle it.&#xD;&#xD;&#xD;// We can&apos;t run code beforehand to define values so we must check each block&#xD;// call if they are set.&#xD;if (window.birdbrain === undefined || window.birdbrain.LEDs === undefined) {&#xD;    window.birdbrain = window.birdbrain || {};&#xD;    window.birdbrain.LEDs = {&#xD;        // By attaching this function to a global variable, it is only&#xD;        // defined once instead of every time this block is called, improving&#xD;        // performance significantly.&#xD;        setLEDIntensity: function(pin, intensity) {&#xD;            function callback() {&#xD;                if (window.birdbrain.LEDs[pin] === intensity) {&#xD;                    delete window.birdbrain.LEDs[pin];&#xD;                }&#xD;                else {&#xD;                    window.birdbrain.LEDs.setLEDIntensity(pin, window.birdbrain.LEDs[pin]);&#xD;                }&#xD;            }&#xD;&#xD;            //Create a new XMLHttpRequest object&#xD;            var xhr = new XMLHttpRequest();&#xD;            var ledURL = "http://127.0.0.1:30063/microbit/out/dwritepin/" + pin + "/" + intensity;&#xD;            //console.log(ledURL);            &#xD;            xhr.open("GET", ledURL, true);&#xD;            xhr.onload = function (e) {&#xD;              if (xhr.readyState === 4) {&#xD;                if (xhr.status === 200) {&#xD;                  callback();&#xD;                } else {&#xD;                  console.error(xhr.statusText);&#xD;                }&#xD;              }&#xD;            };&#xD;            xhr.onerror = function (e) {&#xD;              console.error(xhr.statusText);&#xD;            };&#xD;            xhr.send(null);&#xD;&#xD;        }&#xD;    }&#xD;}&#xD;&#xD;//var realIntensity = Math.floor(intensitynum*10.23);&#xD;&#xD;//realIntensity = Math.max(Math.min(realIntensity,1023.0),0.0);&#xD;&#xD;if (window.birdbrain.LEDs[pin] === undefined) {&#xD;  window.birdbrain.LEDs.setLEDIntensity(pin, intensitynum);&#xD;}&#xD;&#xD;window.birdbrain.LEDs[pin] = intensitynum;</l></block><list><block var="pin"/><block var="intensity"/></list></block><block s="doWait"><l>0</l></block></script><scripts><script x="580.4285714285716" y="95.28571428571445"><block s="doSetVar"><l>intensity</l><block s="reportRound"><block s="reportVariadicProduct"><list><block var="intensity"/><l>2.55</l></list><comment w="90" collapsed="false">Scale factor 255/100</comment></block></block></block></script><script x="659" y="198.53333333333342"><block s="reportVariadicEquals"><list><l></l><l></l></list></block></script><script x="823" y="317.8333333333332"><block s="doIfElse"><l/><script></script><script></script></block></script><script x="707" y="174.66666666666669"><block s="doIf"><block s="reportVariadicOr"><list><block s="reportVariadicGreaterThan"><list><block var="intensity"/><l>0</l></list></block><block s="reportVariadicEquals"><list><block var="intensity"/><l>on</l></list></block></list></block><script><block s="doSetVar"><l>intensity</l><l>1</l></block></script></block><block s="doIf"><block s="reportVariadicOr"><list><block s="reportVariadicGreaterThan"><list><l>1</l><block var="intensity"/></list></block><block s="reportVariadicEquals"><list><block var="intensity"/><l>off</l></list></block></list></block><script><block s="doSetVar"><l>intensity</l><l>0</l></block></script></block></script><script x="610" y="251.83333333333331"><block s="bubble"><block var="intensity"/></block></script><script x="736.4285714285716" y="37.571428571428555"><block s="doReport"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30061/hummingbird/out/led/</l><block var="port"/><l>/</l><block var="intensity"/></list></block></block></block></script><script x="926" y="366.8333333333333"><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="intensity"/><l>on</l></list></block><script><block s="doSetVar"><l>intensity</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="intensity"/><l>off</l></list></block><script><block s="doSetVar"><l>intensity</l><l>0</l></block></script><script><block s="doIfElse"><block s="reportVariadicGreaterThan"><list><block var="intensity"/><l>0</l></list></block><script><block s="doSetVar"><l>intensity</l><l>1</l></block></script><script><block s="doSetVar"><l>intensity</l><l>0</l></block></script></block></script></block></script></block></script></scripts></block-definition><block-definition s="read %&apos;sensor&apos; sensor on digital pin %&apos;pin&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">Light<options>Light&#xD;On/Off&#xD;Momentary Switch&#xD;Opto-interrupt&#xD;Water</options></input><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10&#xD;11&#xD;13&#xD;14&#xD;15&#xD;16</options></input></inputs><script><block s="doReport"><custom-block s="read digital pin %txt"><block var="pin"/></custom-block></block></script><scripts><script x="158.9951171875" y="101.83333333333331"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/in/dreadpin/</l><block var="pin"/></list></block></block></script></scripts></block-definition><block-definition s="read analog period on pin %&apos;pin_num&apos; µs" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;10</options></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>&#xD;                  if (window.snapMicrobit.readAnalogPulsePinBlock === undefined) {&#xD;                    window.snapMicrobit.readAnalogPulsePinBlock = function (pin) {&#xD;                      let robot = "A";&#xD;                      var isDigital, isInput, isServo, isServoPulse, isAnalogPeriod, isDigitalPulse, digitalPulseLevel;&#xD;                      isDigital = isInput = isServo = isServoPulse = isAnalogPeriod = isDigitalPulse = digitalPulseLevel= 0; &#xD;&#xD;                      // Set Pin Config Here:&#xD;                      // Analog Pin, is an output:&#xD;                      isDigital = 0; // 0 is for analog mode&#xD;                      isInput = 1;  // 1 is for read&#xD;                      isAnalogPeriod = 1; // Read the digital pulse  in microseconds&#xD;&#xD;&#xD;&#xD;&#xD;&#xD;                      // Check for first read here&#xD;                      if (window.snapMicrobit.isFirstRead(robot, pin, isDigital, isInput, isAnalogPeriod, isDigitalPulse, digitalPulseLevel))&#xD;                      {&#xD;                          //isDigital=0 and isOutput=1 means this is an analog read pin.&#xD;                          var thisCommand = {&#xD;                            robot: robot,&#xD;                            pin: pin,&#xD;                            value: digitalPulseLevel, // Value necessary to know which pulse to count i.e. high or low.&#xD;                            isDigital: isDigital,&#xD;                            isInput: isInput,&#xD;                            isServo: 0,&#xD;                            isServoPulse: 0,&#xD;                            isAnalogPeriod: 0,&#xD;                            isDigitalPulse: isDigitalPulse,&#xD;                            digitalPulseLevel: digitalPulseLevel&#xD;                          }&#xD;                            window.snapMicrobit.sendCommand(thisCommand);&#xD;                            return -1;&#xD;                      }&#xD;                      else {&#xD;                        var pinVal = window.snapMicrobit.pinToInt(robot, pin);&#xD;                        return pinVal &amp; 0xFFFF&#xD;                      }&#xD;                    }&#xD;                  }&#xD;&#xD;                  // TODO  this loop below doesn&apos;t work. Need to find another way to wait for notification after first read&#xD;&#xD;                  var numCalls = 5;&#xD;                  var callNum = 0;&#xD;                  var value = -1;&#xD;&#xD;                  value = window.snapMicrobit.readAnalogPulsePinBlock(pin);&#xD;&#xD;                  //while ((value == -1) &amp;&amp; (callNum++ &lt; numCalls)) {&#xD;                  //   value = window.snapMicrobit.readPinBlock(pin);&#xD;                  //}&#xD;&#xD;                  return value;&#xD;                </l></block><list><block var="pin_num"/></list></block></block></script></block-definition><block-definition s="stop all" type="command" category="control"><header></header><code></code><translations>ko:모두 멈추기&#xD;de:stoppe alles&#xD;pt:pare todos&#xD;fr:stop tout&#xD;nl:stop alle&#xD;zh_CN:停止 全部&#xD;zh_TW:停止 全部&#xD;ar:توقف الكل&#xD;dk:stop alle&#xD;he:להפסיק הכל&#xD;es:detener todo&#xD;ca:atura tot&#xD;fi:pysäytä kaikki&#xD;sv:stop allt&#xD;</translations><inputs></inputs><script><block s="doReport"><block s="reportURL"><block s="reportJoinWords"><list><l>http://127.0.0.1:30063/microbit/out/stopall</l></list></block></block></block></script></block-definition><block-definition s="micro:bit Print %&apos;string&apos;" type="command" category="looks"><header></header><code></code><translations>ko:micro:bit 출력 _&#xD;de:micro:bit Drucke _&#xD;pt:micro:bit Imprimir _&#xD;fr:micro:bit Imprimer _&#xD;nl:micro:bit Schrijf _&#xD;zh_CN:micro:bit 打印 _&#xD;zh_TW:micro:bit 打印 _&#xD;ar:micro:bit طباعة _&#xD;dk:micro:bit Vis _&#xD;he:micro:bit הדפס  _&#xD;es:micro:bit Imprimir _&#xD;ca:micro:bit Escriu _&#xD;fi:micro:bit Näytä teksti _&#xD;sv:micro:bit Visa text _&#xD;</translations><inputs><input type="%txt">Hello</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>string</l></list><l>////////////////////////////////////////////////////////////////////////////////&#xD;// In order to avoid sending more messages than the app can handle, whenever we&#xD;// send a message we also save it in a persistent global variable. When the&#xD;// message is processed in the app, the callback checks if the global variable&#xD;// still matches what it was changed to. If it was, it deletes the global&#xD;// variable. Otherwise the message is resent with new data.&#xD;//&#xD;// When this block is called it checks if the global value has been set. If it&#xD;// has, it sends a message. Otherwise it just updates the value and lets the&#xD;// callback handle it.&#xD;&#xD;// Encode any special characters in the URL&#xD;string = encodeURIComponent(string);&#xD;&#xD;&#xD;// We can&apos;t run code beforehand to define values so we must check each block&#xD;// call if they are set.&#xD;if (window.birdbrain === undefined || window.birdbrain.printObj === undefined) {&#xD;    window.birdbrain = window.birdbrain || {};&#xD;    window.birdbrain.printObj = {&#xD;        // By attaching this function to a global variable, it is only&#xD;        // defined once instead of every time this block is called, improving&#xD;        // performance significantly.&#xD;        printString: function(string) {&#xD;            function callback() {&#xD;                if (window.birdbrain.printObj.stringToPrint === string) {&#xD;                    delete window.birdbrain.printObj.stringToPrint;&#xD;                }&#xD;                else {&#xD;                    window.birdbrain.printObj.printString(window.birdbrain.printObj.stringToPrint);&#xD;                }&#xD;            }&#xD;            /*&#xD;            var report = {&#xD;                message:"L".charCodeAt(0),&#xD;                port: port.toString().charCodeAt(0),&#xD;                intensity: intensity&#xD;            };&#xD;            chrome.runtime.sendMessage(hummingbirdAppID, report, callback);&#xD;            */&#xD;&#xD;            //Create a new XMLHttpRequest object&#xD;            var xhr = new XMLHttpRequest();&#xD;            var printURL = "http://127.0.0.1:30063/microbit/out/print/" + string;&#xD;            //console.log(printURL);&#xD;            xhr.open("GET", printURL, true);&#xD;            xhr.onload = function (e) {&#xD;              if (xhr.readyState === 4) {&#xD;                if (xhr.status === 200) {&#xD;                  callback();&#xD;                } else {&#xD;                  console.error(xhr.statusText);&#xD;                }&#xD;              }&#xD;            };&#xD;            xhr.onerror = function (e) {&#xD;              console.error(xhr.statusText);&#xD;            };&#xD;            xhr.send(null);&#xD;&#xD;        }&#xD;    }&#xD;}&#xD;&#xD;//TODO Turn &apos;/&apos; chars into % &#xD;&#xD;if (window.birdbrain.printObj.stringToPrint === undefined) {&#xD;  window.birdbrain.printObj.printString(string);&#xD;}&#xD;&#xD;window.birdbrain.printObj.stringToPrint = string;</l></block><list><block var="string"/></list></block><block s="doWait"><l>0</l></block></script></block-definition><block-definition s="read %&apos;level&apos; pulse on pin %&apos;pin_num&apos; µs" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">high<options>high&#xD;low</options></input><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10&#xD;11&#xD;13&#xD;14&#xD;15&#xD;16</options></input></inputs><script><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="level"/><l>high</l></list></block><script><block s="doSetVar"><l>level</l><l>1</l></block></script><script><block s="doSetVar"><l>level</l><l>0</l></block></script></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l><l>level</l></list><l>&#xD;                  if (window.snapMicrobit.readDigitalPulsePinBlock === undefined) {&#xD;                    window.snapMicrobit.readDigitalPulsePinBlock = function (pin, level) {&#xD;                      let robot = "A";&#xD;                      var isDigital, isInput, isServo, isServoPulse, isAnalogPeriod, isDigitalPulse, digitalPulseLevel;&#xD;                      isDigital = isInput = isServo = isServoPulse = isAnalogPeriod = isDigitalPulse = digitalPulseLevel= 0; &#xD;&#xD;                      // Set Pin Config Here:&#xD;                      // Analog Pin, is an output:&#xD;                      isDigital = 1; // 0 is for analog mode&#xD;                      isInput = 1;  // 1 is for read&#xD;                      isDigitalPulse = 1; // Read the digital pulse  in microseconds&#xD;                      digitalPulseLevel = level;  // This is 0 or 1&#xD;&#xD;&#xD;&#xD;&#xD;                      // Check for first read here&#xD;                      if (window.snapMicrobit.isFirstRead(robot, pin, isDigital, isInput, isAnalogPeriod, isDigitalPulse, digitalPulseLevel))&#xD;                      {&#xD;                          //isDigital=0 and isOutput=1 means this is an analog read pin.&#xD;                          var thisCommand = {&#xD;                            robot: robot,&#xD;                            pin: pin,&#xD;                            value: digitalPulseLevel, // Value necessary to know which pulse to count i.e. high or low.&#xD;                            isDigital: isDigital,&#xD;                            isInput: isInput,&#xD;                            isServo: 0,&#xD;                            isServoPulse: 0,&#xD;                            isAnalogPeriod: 0,&#xD;                            isDigitalPulse: isDigitalPulse,&#xD;                            digitalPulseLevel: digitalPulseLevel&#xD;                          }&#xD;                            window.snapMicrobit.sendCommand(thisCommand);&#xD;                            return -1;&#xD;                      }&#xD;                      else {&#xD;                        var pinVal = window.snapMicrobit.pinToInt(robot, pin);&#xD;                        return pinVal &amp; 0xFFFF&#xD;                      }&#xD;                    }&#xD;                  }&#xD;&#xD;                  // TODO  this loop below doesn&apos;t work. Need to find another way to wait for notification after first read&#xD;&#xD;                  var numCalls = 5;&#xD;                  var callNum = 0;&#xD;                  var value = -1;&#xD;&#xD;                  value = window.snapMicrobit.readDigitalPulsePinBlock(pin, level);&#xD;&#xD;                  //while ((value == -1) &amp;&amp; (callNum++ &lt; numCalls)) {&#xD;                  //   value = window.snapMicrobit.readPinBlock(pin);&#xD;                  //}&#xD;&#xD;                  return value;&#xD;                </l></block><list><block var="pin_num"/><block var="level"/></list></block></block></script></block-definition><block-definition s="read Distance (cm) sensor on pin %&apos;echoPin&apos; set trigger on pin %&apos;triggerPin&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10&#xD;11&#xD;13&#xD;14&#xD;15&#xD;16</options></input><input type="%s" readonly="true">0<options>0&#xD;1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10&#xD;11&#xD;13&#xD;14&#xD;15&#xD;16</options></input></inputs><script><custom-block s="set digital pin %s to %s"><block var="triggerPin"/><l>1</l></custom-block><block s="doWait"><l>0.1</l></block><custom-block s="set digital pin %s to %s"><block var="triggerPin"/><l>0</l></custom-block><block s="doReport"><block s="reportRound"><block s="reportQuotient"><custom-block s="read %s pulse on pin %s µs"><l>high</l><block var="echoPin"/></custom-block><l>58</l></block></block></block></script></block-definition><block-definition s="microbitSnapSetup" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>&#xD;                  function setupSnapMicrobit() {&#xD;                    //console.log("Setting up global vars");&#xD;                    window.snapMicrobit = {};&#xD;                    window.snapMicrobit.notificationData = {};&#xD;                    window.snapMicrobit.notificationData.A = new Uint8Array(100).fill(0);&#xD;                    window.snapMicrobit.microbitIsV2 = {};&#xD;                    window.snapMicrobit.microbitIsV2.A = false;&#xD;                    window.snapMicrobit.robotType = {};&#xD;                    window.snapMicrobit.robotType.A = 3;&#xD;                    //  TODO If multiple micro:bits are supported, then servo and led will need robot letters as above.&#xD;                    window.snapMicrobit.servo = {};    &#xD;                    window.snapMicrobit.servo.position = {};&#xD;                    window.snapMicrobit.servo.rotation = {};&#xD;                    window.snapMicrobit.servo.position.lastValue = -1;&#xD;                    window.snapMicrobit.servo.rotation.lastValue = -101;&#xD;                    window.snapMicrobit.led = {};&#xD;                    window.snapMicrobit.led.enable = {};&#xD;                    window.snapMicrobit.led.enable.lastValue = -1;&#xD;                    window.snapMicrobit.led.matrix = {};&#xD;                    window.snapMicrobit.led.matrix.lastValue = 0;&#xD;&#xD;&#xD;                    //console.log("setting up message channel")&#xD;                    window.snapMicrobit.messageChannel = new MessageChannel();&#xD;                    window.snapMicrobit.messageChannel.port1.onmessage = function (e) {&#xD;                        //console.log("Snap: Got a message: ");&#xD;                        //console.log(e);&#xD;                        //console.log(e.data);&#xD;                        if (window.snapMicrobit.notificationData === undefined)&#xD;                          return;&#xD;                        if (e.data.newNotificationData != null &amp;&amp; e.data.robot != null) {&#xD;                          let robot = e.data.robot;&#xD;                          overlaySubArray(window.snapMicrobit.notificationData[robot], e.data.newNotificationData, e.data.frameNumber);&#xD;                          //console.log("New Notification Data for pin " + e.data.pin);&#xD;                          //console.log(window.snapMicrobit.notificationData[robot]);&#xD;                          window.snapMicrobit.robotType[robot] = e.data.robotType;&#xD;                          window.snapMicrobit.microbitIsV2[robot] = e.data.hasV2Microbit;&#xD;                        }&#xD;                    }&#xD;                    window.parent.postMessage("hello from snap", "*", [window.snapMicrobit.messageChannel.port2]);&#xD;&#xD;                    window.snapMicrobit.sendCommand = function(command) {&#xD;                      window.parent.postMessage(command, "*");&#xD;                    }&#xD;&#xD;                    //  Converts byte range 0 - 255 to -127 - 127 represented as a 32 bit signe int&#xD;                    function byteToSignedInt8 (byte) {&#xD;                      var sign = (byte &amp; (1 &lt;&lt; 7));&#xD;                      var value = byte &amp; 0x7F;&#xD;                      if (sign) { value  = byte | 0xFFFFFF00; }&#xD;                      return value;&#xD;                    }&#xD;&#xD;                    //  Converts byte range 0 - 255 to -127 - 127 represented as a 32 bit signe int&#xD;                    function byteToSignedInt16 (msb, lsb) {&#xD;                      var sign = msb &amp; (1 &lt;&lt; 7);&#xD;                      var value = (((msb &amp; 0xFF) &lt;&lt; 8) | (lsb &amp; 0xFF));&#xD;                      if (sign) {&#xD;                        value = 0xFFFF0000 | value;  // fill in most significant bits with 1&apos;s&#xD;                      }&#xD;                      return value;&#xD;                    }&#xD;&#xD;                    // 5 pins per frame,  5 frames,  25 "pins"&#xD;                    function getFrameNumberFromPin(pin) {&#xD;                      if (pin &lt; 5)&#xD;                        return 0;&#xD;                      if (pin &lt; 10)&#xD;                        return 1;&#xD;                      if (pin &lt; 15)&#xD;                        return 2;&#xD;                      if (pin &lt; 20)&#xD;                        return 3;&#xD;                      if (pin &lt; 25)&#xD;                        return 4;  &#xD;                    }&#xD;&#xD;&#xD;                    // overlay 20 byte frames on a 100 byte Uint8 array &#xD;                    function overlaySubArray(arr, subArr, frameNum) {&#xD;                      //console.log("Frame Number " + frameNum);&#xD;                      var start = frameNum * 20;&#xD;                      var stop  = start + 20;&#xD;                      var j = 0;&#xD;                      var i;&#xD;                      for (i = start; i &lt; stop; i++)&#xD;                        arr[i] = subArr[j++];&#xD;                    }&#xD;&#xD;                    window.snapMicrobit.getMicrobitAcceleration = function(axis, robot) {&#xD;                      let accVal = 0;&#xD;                      return (accVal);&#xD;                    }&#xD;&#xD;                    window.snapMicrobit.getDistance = function (robot) {&#xD;                      let distVal = 0;&#xD;                      return (distVal);&#xD;                    }&#xD;&#xD;                    function isDigitalPin ( pinData) {&#xD;                        // THis is little endian&#xD;                        //console.log("isDigitalPin: input =  " + pinData.toString(16));&#xD;                        //console.log((pinData &amp; 0x10000).toString(16));                        &#xD;                        return (pinData &amp; 0x10000) == 0x10000; // bit 16 0x10000 big endian&#xD;                    }&#xD;&#xD;                    function isInputPin ( pinData) {&#xD;                        // THis is little endian&#xD;                        //console.log("isInputPin: input =  " + pinData.toString(16));&#xD;                        //console.log((pinData &amp; 0x20000).toString(16));&#xD;                        return (pinData &amp; 0x20000) == 0x20000; // bit 17  0x20000&#xD;                    }&#xD;&#xD;                    function isAnalogPeriodPin ( pinData) {&#xD;                        // THis is little endian&#xD;                        return (pinData &amp; 0x100000) == 0x100000; // bit 20  0x100000&#xD;                    }&#xD;&#xD;                    function isDigitalPulsePin ( pinData) {&#xD;                        // THis is little endian&#xD;                        return (pinData &amp; 0x200000) == 0x200000; // bit 21  0x200000&#xD;                    }&#xD;&#xD;                    function isDigitalPulseHigh ( pinData) {&#xD;                        // THis is little endian&#xD;                        return (pinData &amp; 0x400000) == 0x400000; // bit 22  0x200000&#xD;                    }&#xD;&#xD;                    // Input is an int.&#xD;                    // Returns a reversed endian int.&#xD;                    function reverseIntEndian(i) {&#xD;                        return (i&amp;0xff)&lt;&lt;24 | (i&amp;0xff00)&lt;&lt;8 | (i&amp;0xff0000)&gt;&gt;8 | (i&gt;&gt;24)&amp;0xff;&#xD;                    }&#xD;&#xD;                    window.snapMicrobit.pinToInt = function(robot, pin) {&#xD;                      pin*=4;  // 4 bytes per pin&#xD;                      //console.log(window.snapMicrobit.notificationData[robot]);&#xD;                      //console.log(window.snapMicrobit.notificationData[robot][pin] +"  " + window.snapMicrobit.notificationData[robot][pin+1]+"  " + window.snapMicrobit.notificationData[robot][pin+2] +"  " + window.snapMicrobit.notificationData[robot][pin+3]);&#xD;                      var byteBuff = new Uint8Array([window.snapMicrobit.notificationData[robot][pin], window.snapMicrobit.notificationData[robot][pin+1], window.snapMicrobit.notificationData[robot][pin+2], window.snapMicrobit.notificationData[robot][pin+3]]);&#xD;                      var dataview = new DataView(byteBuff.buffer);&#xD;                      return dataview.getUint32(0);&#xD;                    }&#xD;&#xD;                    window.snapMicrobit.pinToInt32 = function(robot, pin) {&#xD;                      pin*=4;  // 4 bytes per pin&#xD;                      //console.log(window.snapMicrobit.notificationData[robot]);&#xD;                      //console.log(window.snapMicrobit.notificationData[robot][pin] +"  " + window.snapMicrobit.notificationData[robot][pin+1]+"  " + window.snapMicrobit.notificationData[robot][pin+2] +"  " + window.snapMicrobit.notificationData[robot][pin+3]);&#xD;                      var byteBuff = new Uint8Array([window.snapMicrobit.notificationData[robot][pin], window.snapMicrobit.notificationData[robot][pin+1], window.snapMicrobit.notificationData[robot][pin+2], window.snapMicrobit.notificationData[robot][pin+3]]);&#xD;                      var dataview = new DataView(byteBuff.buffer);&#xD;                      return dataview.getInt32(0);&#xD;                    }&#xD;&#xD;&#xD;                    window.snapMicrobit.isFirstRead  = function (robot, pin, isDigital, isInput, isAnalogPeriod, isDigitalPulse, digitalPulseLevel) {&#xD;                      var firstRead = false;&#xD;                      //console.log("isFirstRead() input pin = 0x" + pin.toString(16));&#xD;                      var pinVal = window.snapMicrobit.pinToInt(robot, pin);&#xD;                      //console.log("Value of pin: " + pin + ": 0x" + pinVal.toString(16));&#xD;                      //console.log("IsInputPin is " + isInputPin(pinVal));&#xD;                      //console.log("IsDigitalPin is " + isDigitalPin(pinVal));&#xD;                      //console.log("isDigital is " + isDigital);&#xD;                      //console.log("isInput is " + isInput);&#xD;                      //console.log((isDigitalPin(pinVal) &amp;&amp; (isDigital == 0)));&#xD;                      //console.log((!isDigitalPin(pinVal)) &amp;&amp; (isDigital == 1));&#xD;                      firstRead = (               (isDigitalPin(pinVal) &amp;&amp; (isDigital == 0)) || ((!isDigitalPin(pinVal)) &amp;&amp; (isDigital == 1)) &#xD;                                               || (isInputPin(pinVal) &amp;&amp; (isInput == 0)) || (!isInputPin(pinVal) &amp;&amp; (isInput == 1))&#xD;                                               || (isAnalogPeriodPin(pinVal) &amp;&amp; (isAnalogPeriod == 0)) || (!isAnalogPeriodPin(pinVal) &amp;&amp; (isAnalogPeriod == 1)) &#xD;                                               || (isDigitalPulsePin(pinVal) &amp;&amp; (isDigitalPulse == 0)) || (!isDigitalPulsePin(pinVal) &amp;&amp; (isDigitalPulse == 1)) &#xD;                                               || (isDigitalPulseHigh(pinVal) &amp;&amp; (digitalPulseLevel == 0)) || (!isDigitalPulseHigh(pinVal) &amp;&amp; (digitalPulseLevel == 1))            &#xD;                                  ); &#xD;                      //console.log("FirstRead returns " + firstRead);                      &#xD;                      return firstRead;&#xD;                    }&#xD;                  }  // end of setupSnapMicrobit&#xD;&#xD;&#xD;//window.snapMicrobit = undefined;&#xD;&#xD;                  let currentVersion = 1&#xD;                  //console.log("BirdBrain ready to set up");&#xD;                  if (window.snapMicrobit === undefined ||&#xD;                    window.snapMicrobit.version === undefined ||&#xD;                    window.snapMicrobit.version &lt; currentVersion) {&#xD;&#xD;                    setupSnapMicrobit()&#xD;                    window.snapMicrobit.version = currentVersion&#xD;                  } else {&#xD;                    //console.log("BirdBrain already set up");&#xD;                  }&#xD;                </l></block><list></list></block></script></block-definition></blocks>